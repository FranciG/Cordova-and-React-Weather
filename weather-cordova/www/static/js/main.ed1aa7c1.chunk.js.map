{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","React","Component","Form","onSubmit","this","props","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","_this","setState","main","temp","sys","weather","stop","className","components_Titles","components_Form","components_Weather","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ed1aa7c1.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Titles extends React.Component {\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>Search weather</h1>\r\n                <p>Find out what clothes to wear</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n//In order for app.js to find titles.js, we export it and then import it in app.js\r\nexport default Titles;","import React from \"react\";\r\n\r\nclass Form extends React.Component {\r\n    render(){\r\n        return(\r\n            <form onSubmit={this.props.getWeather}>\r\n                <input type=\"text\" name=\"city\" placeholder=\"City name\"/>\r\n                <input type=\"text\" name=\"country\" placeholder=\"Country name\"/>\r\n            <button>Find weather</button>\r\n            </form>\r\n                \r\n        );\r\n    }\r\n};\r\nexport default Form;","import React from \"react\";\r\n//The paragraps will show only is they have a value\r\nclass Weather extends React.Component {\r\n    render(){\r\n        return (\r\n            <div>\r\n          {this.props.city && this.props.country && <p> Location {this.props.city}, {this.props.country} </p> }\r\n             \r\n          {this.props.temperature && <p> Temperature: {this.props.temperature}</p>}\r\n          {this.props.humidity && <p>Humidity: {this.props.humidity}</p>}\r\n          {this.props.description && <p>description: {this.props.description}</p>}\r\n          {this.props.error && <p>{this.props.error}</p>}  \r\n            </div>\r\n        );\r\n        }\r\n};\r\nexport default Weather;","import React from \"react\";\n\nimport Titles from \"./components/Titles\"; \n//import it from Titles.js The same is done with the other components, like form file\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\n\nconst API_KEY =\"fd11d171b4de657d0b5d721ce7feba34\";\n\nclass App extends React.Component {\n  state={ //The state changes when we press the button\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n getWeather= async (e) => { //Crate a method getweather\n  e.preventDefault();//So when we press the button from form it doesn't refresh the page\n const city = e.target.elements.city.value; //value is what we type to the input form\n const country = e.target.elements.country.value;\n  const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`); //Template strings ``. This makes the call to the url\n const data = await api_call.json(); //pass variable api_call and call the method json to get data converted to json\nif (city && country) { //Condition to do not get errors if the putton is pressed without data in the city and country fields\n console.log(data);  //the else value will just return the error message\n\n//Make show what we get back from the API using the method setstate from react\nthis.setState({\ntemperature: data.main.temp, //we get it from const data, updating the temperature state once we press the button\ncity: data.name,\ncountry: data.sys.country, //sys.country is where we get it from the json data\nhumidity: data.main.humidity,\ndescription: data.weather[0].description, //it is an array\nerror: \"\"\n});\n} else {\n  this.setState({\n    temperature: undefined, \n    city: undefined,\n    country: undefined,\n    humidity:undefined,\n    description: undefined,\n    error: \"Please enter city and country.\"\n    });\n\n  \n\n  } \n}\n\nrender() {\n  return (\n    <div>\n      <div className=\"wrapper\">\n        <div className=\"main\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-xs-5 title-container\">\n                <Titles />\n              </div>\n              <div className=\"col-xs-7 form-container\">\n                <Form getWeather={this.getWeather} />\n                <Weather \n                  temperature={this.state.temperature} \n                  humidity={this.state.humidity}\n                  city={this.state.city}\n                  country={this.state.country}\n                  description={this.state.description}\n                  error={this.state.error}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n};\n\nexport default App;","\n\n\n\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}